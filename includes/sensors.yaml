---
#-
#
#  ___  ___ _ __  ___  ___  _ __ ___
# / __|/ _ \ '_ \/ __|/ _ \| '__/ __|
# \__ \  __/ | | \__ \ (_) | |  \__ \
# |___/\___|_| |_|___/\___/|_|  |___/
#
#
#- from github.com/basnijholt/home-assistant-config

#  _____                    _       _
# |_   _|__ _ __ ___  _ __ | | __ _| |_ ___    ___  ___ _ __  ___  ___  _ __ ___
#   | |/ _ \ '_ ` _ \| '_ \| |/ _` | __/ _ \  / __|/ _ \ '_ \/ __|/ _ \| '__/ __|
#   | |  __/ | | | | | |_) | | (_| | ||  __/  \__ \  __/ | | \__ \ (_) | |  \__ \
#   |_|\___|_| |_| |_| .__/|_|\__,_|\__\___|  |___/\___|_| |_|___/\___/|_|  |___/
#                    |_|

- platform: template
  sensors:
    dishwasher_watts:
      value_template: >
        {{ state_attr("switch.dishwasher", "power") | float("Unavailable") }}
      unit_of_measurement: Watt
      friendly_name: Dishwasher usage

    count_automations:
      icon_template: mdi:autorenew
      value_template: "{{ states.automation | count }}"

    count_scripts:
      icon_template: mdi:script-text-outline
      value_template: "{{ states.script| count }}"

    count_device_trackers:
      icon_template: mdi:map-marker
      value_template: "{{ states.device_tracker | count }}"

    count_binary_sensors:
      icon_template: mdi:unfold-more-horizontal
      value_template: "{{ states.binary_sensor| count }}"

    count_sensors:
      icon_template: mdi:resistor
      value_template: "{{ states.sensor | count }}"

    count_switches:
      icon_template: mdi:light-switch
      value_template: "{{ states.switch | count }}"

    count_zones:
      icon_template: mdi:map-marker-radius
      value_template: "{{ states.zone | count }}"

    count_input_booleans:
      icon_template: mdi:toggle-switch
      value_template: "{{ states.input_boolean | count }}"

    count_input_numbers:
      icon_template: mdi:numeric
      value_template: "{{ states.input_number | count }}"

    count_input_texts:
      icon_template: mdi:alphabetical
      value_template: "{{ states.input_text | count }}"

    count_input_selects:
      icon_template: mdi:view-list
      value_template: "{{ states.input_select | count }}"

    count_input_datetimes:
      icon_template: mdi:calendar-clock
      value_template: "{{ states.input_datetime | count }}"

    favorite_playlist_of_nearest_person:
      value_template: >
        {% if is_state_attr("proximity.home", "nearest", "basnijholt-iphone") %}
        6rPTm9dYftKcFAfwyRqmDZ
        {% else %}
        6rPTm9dYftKcFAfwyRqmDZ
        {% endif %}

    tv_volume:
      value_template: >
        {{ state_attr("media_player.tv", "volume_level") }}
      unit_of_measurement: "%"

    kef_ls50_volume:
      value_template: >
        {{ state_attr("media_player.kef_ls50", "volume_level") }}
      unit_of_measurement: "%"

    timestamp_start_of_today:
      value_template: >
        {{ as_timestamp(now().replace(hour=0).replace(minute=0).replace(second=0)) }}
      unit_of_measurement: "s"

    time_at_work_prognosis:
      value_template: >
        {% set day = [now().weekday(), 4] | min %}
        {% set t_total = states("sensor.time_at_work_this_week")|float(0) %}
        {% set t_today = states("sensor.time_at_work_today")|float(0) %}
        {% set hours_per_day_including_today = t_total / (day + 1) %}
        {% set hours_per_day_excluding_today = (t_total - t_today ) / (day + 10**-16) %}
        {% set seven_oclock = as_timestamp(now().replace(hour=19).replace(minute=0).replace(second=0)) %}

        {% if t_today > hours_per_day_excluding_today
              or (not is_state("person.bas", "Work") and t_today > 0)
              or (as_timestamp(now()) > seven_oclock)
              or day == 0
              or now().weekday() > 4
              or 5 * hours_per_day_including_today > 40 %}
          {% set hours_per_day = hours_per_day_including_today %}
        {% else %}
          {% set hours_per_day = hours_per_day_excluding_today %}
        {% endif %}

        {{ (5 * hours_per_day)|round(2) }}
      unit_of_measurement: h

    n_days_last_month:
      value_template: >
        {% set start_of_month = now().replace(day=1) %}
        {% set start_of_last_month = start_of_month.replace(month=now().month-1) %}
        {{ ((start_of_month - start_of_last_month).total_seconds() / 86400) | round }}

    daily_power:
      friendly_name: Daily Power
      unit_of_measurement: kWh
      value_template: >
        {{ states("sensor.daily_power_offpeak")|float(0) + states("sensor.daily_power_peak")|float(0) }}

    monthly_power:
      friendly_name: Monthly Power
      unit_of_measurement: kWh
      value_template: >
        {{ states("sensor.monthly_power_offpeak")|float(0) + states("sensor.monthly_power_peak")|float(0) }}

    monthly_power_last_period:
      friendly_name: Monthly Power (Last period)
      unit_of_measurement: kWh
      value_template: >
        {{ state_attr("sensor.monthly_power_offpeak", "last_period")|float(0) + state_attr("sensor.monthly_power_peak", "last_period")|float(0) }}

    monthly_power_cost_last_period:
      friendly_name: Monthly Power (Last period)
      unit_of_measurement: €
      value_template: >
        {{ (state_attr("sensor.monthly_power_offpeak", "last_period")|float(0) * states("sensor.electricity_price_offpeak")|float(0)
            + state_attr("sensor.monthly_power_peak", "last_period")|float(0) * states("sensor.electricity_price_peak")|float(0)) | round(2) }}

    gas_price:
      friendly_name: Gas price
      unit_of_measurement: €/m³
      value_template: >
        {{ 0.7884 }}

    daily_gas_cost:
      friendly_name: Daily Power
      unit_of_measurement: €
      value_template: >
        {{ (states("sensor.daily_gas")|float(0) * 0.7884) | round(2) }}

    monthly_gas_cost:
      friendly_name: Monthly Power
      unit_of_measurement: €
      value_template: >
        {{ (states("sensor.monthly_gas")|float(0) * 0.7884) | round(2) }}

    monthly_gas_cost_last_period:
      friendly_name: Monthly Power (Last period)
      unit_of_measurement: €
      value_template: >
        {{ (state_attr("sensor.monthly_gas", "last_period")|float(0) * 0.7884) | round(2) }}

    electricity_price_offpeak:
      friendly_name: Electricity price
      unit_of_measurement: €/kWh
      value_template: >
        {{ 0.2307 }}

    electricity_price_peak:
      friendly_name: Electricity price
      unit_of_measurement: €/kWh
      value_template: >
        {{ 0.2479 }}

    daily_power_cost:
      friendly_name: Daily Power
      unit_of_measurement: €
      value_template: >
        {{ (states("sensor.daily_power_offpeak")|float(0) * states("sensor.electricity_price_offpeak")|float(0)
            + states("sensor.daily_power_peak")|float(0) * states("sensor.electricity_price_peak")|float(0)) | round(2) }}

    monthly_power_cost:
      friendly_name: Monthly Power
      unit_of_measurement: €
      value_template: >
        {{ (states("sensor.monthly_power_offpeak")|float(0) * states("sensor.electricity_price_offpeak")|float(0)
            + states("sensor.monthly_power_peak")|float(0) * states("sensor.electricity_price_peak")|float(0)) | round(2) }}

    daily_energy_fixed_cost:
      friendly_name: Fixed daily energy cost (gas and power)
      unit_of_measurement: €
      # XXX: remove _ when 0.117
      value_template: >
        {% set _ = states("sensor.date") %}
        {{ (0.1480 + 0.3554) + (0.1480 + 0.6293) }}

    monthly_energy_fixed_cost:
      friendly_name: Fixed daily energy cost (gas and power)
      unit_of_measurement: €
      value_template: >
        {{ states("sensor.daily_energy_fixed_cost")|float(0) * now().day }}

    monthly_energy_fixed_cost_last_period:
      friendly_name: Fixed energy cost (gas and power) (Last period)
      unit_of_measurement: €
      value_template: >
        {{ states("sensor.daily_energy_fixed_cost")|float(0) * states("sensor.n_days_last_month")|int(0) }}

    nearest_iphone_notify:
      friendly_name: Nearest iPhone's notify service
      value_template: >
        {% if is_state("person.bas", "home") and is_state("person.marcella", "home") %}
          notify.all_iphones
        {% elif is_state_attr("proximity.home", "nearest", "basnijholt-iphone") %}
          notify.iphone_bas
        {% else %}
          notify.mobile_app_marcella_iphone
        {% endif %}

    half_hour_before_alarm:
      friendly_name: Half an hour before alarm
      value_template: >
        {% set t_alarm = state_attr("input_datetime.alarm_clock", "timestamp") | int %}
        {% set t_start = states("sensor.timestamp_start_of_today") | int %}
        {% set half_hour_before_alarm = t_alarm + t_start - 60 * 30 %}
        {{ half_hour_before_alarm | timestamp_custom("%H:%M", True) }}

    ten_minutes_before_alarm:
      friendly_name: Ten minutes before alarm
      value_template: >
        {% set t_alarm = state_attr("input_datetime.alarm_clock", "timestamp") | int %}
        {% set t_start = states("sensor.timestamp_start_of_today") | int %}
        {% set before_alarm = t_alarm + t_start - 60 * 10 %}
        {{ before_alarm | timestamp_custom("%H:%M", True) }}

    # Includes fix from https://github.com/basnijholt/home-assistant-config/issues/32
    hours_outside_per_day_marcella:
      friendly_name: Hours outside per day (Marcella)
      value_template: >
        {% set value = state_attr("sensor.quarantine_meter_marcella", "value") %}
        {% if value != None %}

        {% set nargs = 1 + (value | length) - (value.replace(' ', '') | length) %}
        {% if nargs < 2 %}{% set value = "0h " ~ value %}{% endif %}
        {% if nargs < 3 %}{% set value = "0d " ~ value %}{% endif %}

        {% set d, h, m = value.split() %}
        {% set d, h, m = d[:-1] | int, h[:-1] | int, m[:-1] | int %}
        {% set hours_outside = ((14 - d) * 86400 - h * 3600 - m * 60) / 3600 %}
        {{ (hours_outside / 14) | round(1) }}
        {% endif %}

    # Includes fix from https://github.com/basnijholt/home-assistant-config/issues/32
    hours_outside_per_day_bas:
      friendly_name: Hours outside per day (Marcella)
      value_template: >
        {% set value = state_attr("sensor.quarantine_meter_bas", "value") %}
        {% if value != None %}

        {% set nargs = 1 + (value | length) - (value.replace(' ', '') | length) %}
        {% if nargs < 2 %}{% set value = "0h " ~ value %}{% endif %}
        {% if nargs < 3 %}{% set value = "0d " ~ value %}{% endif %}

        {% set d, h, m = value.split() %}
        {% set d, h, m = d[:-1] | int, h[:-1] | int, m[:-1] | int %}
        {% set hours_outside = ((14 - d) * 86400 - h * 3600 - m * 60) / 3600 %}
        {{ (hours_outside / 14) | round(1) }}
        {% endif %}

    adaptive_lighting_color_temp_mired:
      unit_of_measurement: "mired"
      value_template: >
        {{ state_attr("switch.adaptive_lighting_living_room", "color_temp_mired") }}

    adaptive_lighting_color_temp_kelvin:
      unit_of_measurement: "K"
      value_template: >
        {{ state_attr("switch.adaptive_lighting_living_room", "color_temp_kelvin") }}

    adaptive_lighting_brightness:
      unit_of_measurement: "%"
      value_template: >
        {{ state_attr("switch.adaptive_lighting_living_room", "brightness_pct") }}

    adaptive_lighting_sun_position:
      unit_of_measurement: "%"
      value_template: >
        {{ 100 * state_attr("switch.adaptive_lighting_living_room", "sun_position") }}

    lights_on_total_hours:
      unit_of_measurement: h
      value_template: >
        {{ states('sensor.hours_bedroom_lights_have_been_on_last_7_days')|float(0) * 7
            + states('sensor.hours_living_room_lights_have_been_on_last_7_days')|float(0) * 5
            + states('sensor.hours_toilet_light_has_been_on_last_7_days')|float(0) * 1
            + states('sensor.hours_bathroom_light_has_been_on_last_7_days')|float(0) * 1
            + states('sensor.hours_kitchen_lights_have_been_on_last_7_days')|float(0) * 2
            + states('sensor.hours_hall_lights_have_been_on_last_7_days')|float(0) * 5
            + states('sensor.hours_bathroom_light_has_been_on_last_7_days')|float(0) * 1 }}

    lights_on_total_kwh:
      unit_of_measurement: h
      value_template: >
        {{ states('sensor.lights_on_total_hours')|float(0) * 5.4 / 1000 }}

    robot_vacuum_last_clean_duration:
      unit_of_measurement: s
      value_template: >
        {% set t_start = state_attr("input_datetime.vacuum_on", "timestamp") | int %}
        {% set t_off = state_attr("input_datetime.vacuum_off", "timestamp") | int %}
        {% set duration = t_off - t_start %}
        {{ duration }}

#   ___  _   _
#  / _ \| |_| |__   ___ _ __ ___
# | | | | __| '_ \ / _ \ '__/ __|
# | |_| | |_| | | |  __/ |  \__ \
#  \___/ \__|_| |_|\___|_|  |___/
#

- platform: statistics
  name: Humidity bathroom stats
  entity_id: sensor.humidity_bathroom
  sampling_size: 86400 # make sure all data points of the last 24hrs are included
  max_age: "24:00:00"
  state_characteristic: mean

- platform: derivative
  source: sensor.humidity_bathroom
  name: Humidity bathroom derivative
  unit_time: min
  time_window: "00:10:00"

# XXX: not used
- platform: min_max
  name: Temperature mean
  type: mean
  entity_ids:
    - sensor.temperature_living_room
    - sensor.temperature_bedroom
    - sensor.temperature_bathroom
    - sensor.temperature_hall

- platform: time_date
  display_options:
    - date
    - time

- platform: file
  name: contractions_csv
  file_path: "/config/utils/contractions_log.csv"
  value_template: "{{ value }}"
  scan_interval: 1

#  _____ _                  _                  _
# |_   _(_)_ __ ___   ___  | |_ _ __ __ _  ___| | _____ _ __ ___
#   | | | | '_ ` _ \ / _ \ | __| '__/ _` |/ __| |/ / _ \ '__/ __|
#   | | | | | | | | |  __/ | |_| | | (_| | (__|   <  __/ |  \__ \
#   |_| |_|_| |_| |_|\___|  \__|_|  \__,_|\___|_|\_\___|_|  |___/
#

- platform: history_stats
  name: Hours TV has been on last 7 days
  entity_id: media_player.tv
  state: "on"
  type: time
  duration:
    days: 7
  end: "{{ now() }}"

- platform: history_stats
  name: Times TV has been on last 7 days
  entity_id: media_player.tv
  state: "on"
  type: count
  duration:
    days: 7
  end: "{{ now() }}"

- platform: history_stats
  name: Hours dishwasher has been on last 7 days
  entity_id: binary_sensor.dishwasher
  state: "on"
  type: time
  duration:
    days: 7
  end: "{{ now() }}"

- platform: history_stats
  name: Times dishwasher has been on last 7 days
  entity_id: binary_sensor.dishwasher
  state: "on"
  type: count
  duration:
    days: 7
  end: "{{ now() }}"

- platform: history_stats
  name: Hours washing machine has been on last 7 days
  entity_id: binary_sensor.washing_machine
  state: "on"
  type: time
  duration:
    days: 7
  end: "{{ now() }}"

- platform: history_stats
  name: Times washing machine has been on last 7 days
  entity_id: binary_sensor.washing_machine
  state: "on"
  type: count
  duration:
    days: 7
  end: "{{ now() }}"

- platform: history_stats
  name: Quarantine meter Bas
  entity_id: person.bas
  state: "home"
  type: ratio
  duration:
    days: 14
  end: "{{ now() }}"

- platform: history_stats
  name: Quarantine meter Marcella
  entity_id: person.marcella
  state: "home"
  type: ratio
  duration:
    days: 14
  end: "{{ now() }}"

- platform: history_stats
  name: Quarantine meter Bas times left
  entity_id: person.bas
  state: "home"
  type: count
  duration:
    days: 14
  end: "{{ now() }}"

- platform: history_stats
  name: Quarantine meter Marcella times left
  entity_id: person.marcella
  state: "home"
  type: count
  duration:
    days: 14
  end: "{{ now() }}"

- platform: history_stats
  name: Hours bedroom lights have been on last 7 days
  entity_id: light.bedroom_lights
  state: "on"
  type: time
  duration:
    days: 7
  end: "{{ now() }}"

- platform: history_stats
  name: Hours living room lights have been on last 7 days
  entity_id: light.living_room_lights
  state: "on"
  type: time
  duration:
    days: 7
  end: "{{ now() }}"

- platform: history_stats
  name: Hours toilet light has been on last 7 days
  entity_id: light.toilet
  state: "on"
  type: time
  duration:
    days: 7
  end: "{{ now() }}"

- platform: history_stats
  name: Hours kitchen lights have been on last 7 days
  entity_id: light.kitchen_lights
  state: "on"
  type: time
  duration:
    days: 7
  end: "{{ now() }}"

- platform: history_stats
  name: Hours hall lights have been on last 7 days
  entity_id: light.hall_lights
  state: "on"
  type: time
  duration:
    days: 7
  end: "{{ now() }}"

- platform: history_stats
  name: Hours bathroom light has been on last 7 days
  entity_id: light.bathroom_ceiling
  state: "on"
  type: time
  duration:
    days: 7
  end: "{{ now() }}"

  # __        __         _      _   _                  _                  _
# \ \      / /__  _ __| | __ | |_(_)_ __ ___   ___  | |_ _ __ __ _  ___| | _____ _ __
#  \ \ /\ / / _ \| '__| |/ / | __| | '_ ` _ \ / _ \ | __| '__/ _` |/ __| |/ / _ \ '__|
#   \ V  V / (_) | |  |   <  | |_| | | | | | |  __/ | |_| | | (_| | (__|   <  __/ |
#    \_/\_/ \___/|_|  |_|\_\  \__|_|_| |_| |_|\___|  \__|_|  \__,_|\___|_|\_\___|_|
#

- platform: history_stats
  name: Time at work this week
  entity_id: person.bas
  state: Work
  type: time
  start: >
    {{ states("sensor.timestamp_start_of_today")|float(0) - now().weekday() * 86400 }}
  end: "{{ now() }}"

- platform: history_stats
  name: Time at work today
  entity_id: person.bas
  state: Work
  type: time
  start: >
    {{ states("sensor.timestamp_start_of_today")|float(0) - 0 * 86400 }}
  duration:
    hours: 24

- platform: history_stats
  name: Time at work on Monday
  entity_id: person.bas
  state: Work
  type: time
  duration:
    hours: 24
  start: >
    {% set day = now().weekday() - 0 %}
    {% if day < 0 %}{% set day = day + 7 %}{% endif %}
    {{ states("sensor.timestamp_start_of_today")|float(0) - day * 86400}}

- platform: history_stats
  name: Time at work on Tuesday
  entity_id: person.bas
  state: Work
  type: time
  duration:
    hours: 24
  start: >
    {% set day = now().weekday() - 1 %}
    {% if day < 0 %}{% set day = day + 7 %}{% endif %}
    {{ states("sensor.timestamp_start_of_today")|float(0) - day * 86400}}

- platform: history_stats
  name: Time at work on Wednessday
  entity_id: person.bas
  state: Work
  type: time
  duration:
    hours: 24
  start: >
    {% set day = now().weekday() - 2 %}
    {% if day < 0 %}{% set day = day + 7 %}{% endif %}
    {{ states("sensor.timestamp_start_of_today")|float(0) - day * 86400}}

- platform: history_stats
  name: Time at work on Thursday
  entity_id: person.bas
  state: Work
  type: time
  duration:
    hours: 24
  start: >
    {% set day = now().weekday() - 3 %}
    {% if day < 0 %}{% set day = day + 7 %}{% endif %}
    {{ states("sensor.timestamp_start_of_today")|float(0) - day * 86400}}

- platform: history_stats
  name: Time at work on Friday
  entity_id: person.bas
  state: Work
  type: time
  duration:
    hours: 24
  start: >
    {% set day = now().weekday() - 4 %}
    {% if day < 0 %}{% set day = day + 7 %}{% endif %}
    {{ states("sensor.timestamp_start_of_today")|float(0) - day * 86400}}

#  ____                                          _    ____
# |  _ \ _____      _____ _ __    __ _ _ __   __| |  / ___| __ _ ___
# | |_) / _ \ \ /\ / / _ \ '__|  / _` | '_ \ / _` | | |  _ / _` / __|
# |  __/ (_) \ V  V /  __/ |    | (_| | | | | (_| | | |_| | (_| \__ \
# |_|   \___/ \_/\_/ \___|_|     \__,_|_| |_|\__,_|  \____|\__,_|___/

# From the "Meterkast" Home Assistant

# - platform: mqtt
#   state_topic: homeassistant/sensor/gas_consumption/state
#   unit_of_measurement: m³
#   name: Gas Consumption
#   icon: mdi:fire
#   device_class: gas
#   state_class: total_increasing

# - platform: mqtt
#   state_topic: homeassistant/sensor/hourly_gas_consumption/state
#   unit_of_measurement: m³/h
#   name: Hourly Gas Consumption
#   icon: mdi:fire
#   device_class: gas
#   state_class: total_increasing

# - platform: mqtt
#   state_topic: homeassistant/sensor/power_consumption/state
#   unit_of_measurement: kW
#   name: Power Consumption
#   icon: mdi:flash
#   device_class: power
#   state_class: measurement

# - platform: mqtt
#   state_topic: homeassistant/sensor/energy_consumption_tarif_1/state
#   unit_of_measurement: kWh
#   name: Energy Consumption (tarif 1)
#   icon: mdi:flash
#   device_class: energy
#   state_class: total_increasing

# - platform: mqtt
#   state_topic: homeassistant/sensor/energy_consumption_tarif_2/state
#   unit_of_measurement: kWh
#   name: Energy Consumption (tarif 2)
#   icon: mdi:flash
#   device_class: energy
#   state_class: total_increasing

# - platform: mqtt
#   state_topic: homeassistant/sensor/power_tariff/state
#   name: Power Tariff
#   icon: mdi:flash

- platform: filter
  name: "Gas consumption filtered"
  entity_id: sensor.gas_consumption
  filters:
    - filter: time_simple_moving_average
      window_size: 00:30:00
      precision: 2

- platform: derivative
  source: sensor.gas_consumption
  name: Gas per hour
  unit: m³/h
  unit_time: h
  time_window: "00:30:00"

- platform: derivative
  source: sensor.gas_consumption_filtered
  name: Gas per hour (filtered)
  unit: m³/h
  unit_time: h
